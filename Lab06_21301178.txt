#1(a)
def factorial(n, result = 1):
    if n > 0:
        result = result*n
        factorial(n-1, result)
        
    else:
        print('Factorial =', result)
    


factorial(5)  


#1(b)
def nth_fibonacci(n):
    
    if (n == 0 or n == 1):
        return n
    else:
        return nth_fibonacci(n-1) + nth_fibonacci(n-2)


n = 6   
print(n, 'th fibonacci = ', nth_fibonacci(n)) 


#1(c)
def array_print(array, count = 0):
    if count==len(array):
        return
    elif count < len(array):
        print(array[count], end =' ')
        array_print(array, count+1)
 
array = [1, 2, 3, 4]
array_print(array)


print()
#1(d)
def powerN(x, n):
    if n == 0:
        return 1
    else:
        if n > 0:
            return x*powerN(x, n-1)
        else:
            return x*powerN(x, n-1)


print(powerN(3, 2))




#2(a)
def Binary_conversion(n):
    if n > 1:
        Binary_conversion(n//2)
    print(n%2, end='')


Binary_conversion(6)     
print()


#task 2(b)


class Node:
    
    def __init__(self, elem, n = None):
        self.element = elem
        self.next = n
        
class Singly_linked:
    
    def __init__(self, array):
        if type(array) == list:
            self.head = None
            for elem in array:
                if self.head == None:
                    node = Node(elem)
                    self.head = node
                    head = self.head
                else:
                    node = Node(elem)
                    head.next = node
                    head = node
        else:
            self.head = array


array = [1, 2, 3, 4, 5]
singly = Singly_linked(array)


def list_sum(head):
    
    if head.next == None:
        return head.element
    else:
        return head.element + list_sum(head.next)




print(list_sum(singly.head))




def rev_print(head):
    
    if head.next!= None:
        rev_print(head.next)
    print(head.element)
      
rev_print(singly.head)




##Task(3)


def hocBuilder(height):
    if height == 0:
        return height
    if height == 1:
        return 8
    else:
        return hocBuilder(height-1) + 5


print(hocBuilder(3))


#Task(4(a))


#Task 4 (a)


def triangle_height(n):
    if n == 0:
        return ''
    else:
        triangle_height(n-1)
        print_seq(n)
    print()


def print_seq(x) :
    if x == 0 :
        return ''
    else :
        print_seq(x-1)
        print(x, end = ' ')


triangle_height(5)
print()


    
#Task 4 (b)


def row(row, col = 1):
    if row == 0:         
        return           
    print(' ' * (row - 1) * 2, end = '')
    line(col)
    print()
    row(row - 1, col + 1)
    
def line(col):
    if col == 0:     
        return 
    line(col - 1)
    print(col, end = ' ')


row_col(5)




#Task 5


import sys
sys.setrecursionlimit(5000)


class FinalQ:
    def print(self,array,idx):
        if (idx < len(array)):
            profit = self.calcProfit(array[idx])
            print(str(idx+1)+'.Invesment:',str(array[idx])+'; Profit:',profit)
            if idx == len(array):
                return
            else:
                self.print(array,idx+1)




    def calcProfit(self, investment):
        if investment <= 25000:
            return 0
        elif investment > 100000:
            return 8 + self.calcProfit(investment - 100)
        else:
            return 4.5 + self.calcProfit(investment - 100)


array = [25000,100000,250000,350000]
f = FinalQ()
f.print(array,0)