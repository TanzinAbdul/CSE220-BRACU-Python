class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p


class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = None
    if type(a) == list:
        self.head = Node(None, None, None)
        head = self.head
        for i in range(len(a)):
            node = Node(a[i], None, None)
            head.next = node
            node.prev = head
            head = node
        head.next = self.head
        self.head.prev = head
  
  # Counts the number of Nodes in the list
  def countNode(self):
    count = 0
    head = self.head.next
    while head.element != None:
        head = head.next
        count += 1
        
    return count
  
  # prints the elements in the list
  def forwardprint(self):
    head = self.head
    head = head.next
    while head.element != None:
        if head.next.element == None:
            print(str(head.element) + '.')
        else:
            print(head.element, end = ',')
        head = head.next




  # prints the elements in the list backward
  def backwardprint(self):
    tail = self.head.prev
    while tail.element != None:
        if tail.prev.element == None:
            print(str(tail.element)+'.')
        else:
            print(tail.element, end = ',')
        tail = tail.prev




  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    i = 0
    head = self.head.next
    if idx > self.countNode()-1:
        print('Index error')
    else:
        while i != idx:
            head = head.next
            i += 1
    return head
  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    head = self.head.next
    idx = 0
    while head.element != elem:
        head = head.next
        idx = idx + 1
        if idx >= self.countNode():
            return -1
    return idx


  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    head = self.head.next
    tail = self.head.prev
    
    if idx > self.countNode():
        print('Invalid')
    elif idx == 0:
        new_head = Node(elem, self.head.next, self.head)
        head.prev = new_head
        self.head.next = new_head
        self.head.prev
    elif idx == self.countNode():
        new_tail = Node(elem, self.head,tail)
        self.head.prev = new_tail
        tail.next = new_tail
        
    else:
        count = 0
        new_node = Node(elem, None, None)
        while count != idx-1:
            head = head.next
            count += 1
        new_node.prev = head
        new_node.next = head.next
        new_node.next.prev = new_node
        head.next = new_node
    
  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    head = self.head.next
    tail = self.head.prev


    if idx >= self.countNode():
        return None
    
    elif idx == 0:
        self.head.next = self.head.next.next
        self.head.next.prev = self.head
        out = head
        head = None
        
    elif idx == self.countNode():
        tail.prev.next = self.head
        self.head.prev = tail.prev
        out = tail.next
        tail = None
        
    else:
        count = 0
        while count != idx-1:
            head = head.next
            count += 1
            out = head.next
        head.next = head.next.next
        head.next.prev = head
        
        head = None
    
    return str(out.element)


##Driver Code below##


print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array


h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4


print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"


print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.


print("///  Test 04  ///")


a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  


# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.


print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  


print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  


# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: " + h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: " + h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: " + h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.