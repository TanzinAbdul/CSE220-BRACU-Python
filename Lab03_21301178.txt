class Node:
  def __init__(self, e, n):
    self.element = e
    self.next = n


class LinkedList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array. head will refer
  #  to the Node that contains the element from a[0]
  #  Else Sets the value of head. head will refer
  # to the given LinkedList
  # Hint: Use the type() function to determine the data type of a
    # To Do
    self.head = None
    if type(a) == list:
        self.head = Node(a[0], None)
        head = self.head
        for i in range(1, len(a)):
            node = Node(a[i], None)
            head.next = node
            head = node


    else:
        print('Invalid List')
        
    
  
  # Count the number of nodes in the list
  def countNode(self):
    head = self.head
    count = 0
    while head!= None:
        count += 1
        head = head.next
    return count
  
  # Print elements in the list
  def printList(self):
    head = self.head
    while head != None:
        if head.next == None:
            print(str(head.element)+'.')
        else:
            print(head.element, end= ',')
        head = head.next
    print('')


  # returns the reference of the Node at the given index. For invalid index return None.
  def nodeAt(self, idx):
    head = self.head
    i = 0
    while i < idx+1:
        if i == idx:
            return head
        elif i >= self.countNode():
            return None
        head = head.next
        i += 1
  
  # returns the element of the Node at the given index. For invalid idx return None.
  def get(self, idx):
    head = self.head
    i = 0
    while i < idx+1:
        if i == idx:
            return head.element
        elif i >= self.countNode():
            return None
        head = head.next
        i += 1


  
  # updates the element of the Node at the given index. 
  # Returns the old element that was replaced. For invalid index return None.
  # parameter: index, element
  def set(self, idx, elem):
    head = self.head
    i = 0
    while i < idx+1:
        if i == idx:
            prev_elem = head.element
            head.element = elem
            return prev_elem
        elif i >= self.countNode():
            return None
        head = head.next
        i += 1
    


  # returns the index of the Node containing the given element.
  # if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    head = self.head
    idx = 0
    while head.element != elem:
        if head.next == None:
            return -1
        else:
            idx += 1
            head = head.next 
    return idx
  
  # returns true if the element exists in the List, return false otherwise.
  def contains(self, elem):
    head = self.head
    i = 0
    while i < self.countNode():
        if head.element == elem:
            return True
        else:
            head = head.next
    
    return False
    
  # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
  def copyList(self):
    i = 0
    head = self.head
    array = [0]*self.countNode()
    while i < self.countNode():
        array[i] = head.element
        head = head.next
        i += 1
    return array




  # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
  def reverseList(self):
    rev_list = [0]*self.countNode()
    i = self.countNode()-1
    head = self.head
    while i > -1:
        rev_list[i] = head.element
        head = head.next
        i -= 1
    
    return rev_list
  
  # inserts Node containing the given element at the given index
  # Check validity of index.
  def insert(self, elem, idx):
    new_node = Node(elem, None)
    head = self.head
    i = 0
    if idx > self.countNode():
        print('Invalid index')
    elif idx == 0:
        new_node.next = head
        self.head = new_node
    elif idx == self.countNode():
        while head.next != None:
            head = head.next
        head.next = new_node
    else:
        while i < self.countNode()-1:
            if i == idx-1:
                new_node.next = head.next
                head.next = new_node
                head = new_node
                    
            head = head.next
            i += 1
        
    
  # removes Node at the given index. returns element of the removed node.
  # Check validity of index. return None if index is invalid.
  def remove(self, idx):
    head = self.head
    i = 0
    if idx > self.countNode()-1:
        print('Invalid index')
    elif idx == 0:
        self.head = head.next
        removed = head
    elif idx == self.countNode()-1:
        while head.next.next != None:
            head = head.next
            removed = head.next
        head.next = None
    else:
        while i < self.countNode()-2:
            if i == idx-1:
                removed = head.next
                head.next = head.next.next
                head = head.next.next
            head = head.next
            i += 1
    return removed.element
  
  # Rotates the list to the left by 1 position.
  def rotateLeft(self):
    head = self.head
    tail = self.head
    self.head = head.next
    while head.next != None:
        head = head.next
    head.next = tail
    tail.next = None
  
  # Rotates the list to the right by 1 position.
  def rotateRight(self):
    head = self.head
    tail = self.head
    while tail.next.next != None:
        tail = tail.next
    self.head = tail.next
    self.head.next = head
    tail.next = None




print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]


h1.printList() # This should print: 10,20,30,40
print(h1.countNode()) # This should print: 4


print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
    
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None.
    
    
print("////// Test 04 //////")
    
# updates the element of the Node at the given index. 
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
         
print(h1.set(1,85)) # This should print: 20
h1.printList() # This should print: 10,85,30,40.
print(h1.set(15,85)) # This should print: None
h1.printList() # This should print: 10,85,30,40. 
    
print("////// Test 05 //////")
# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
    
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)
print(ask) # This should print: True.
    
    
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70.  
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.  
    
print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list
h4.printList() # This should print: 10,20,30,40,50.  
# Makes a reversed copy of the given List. Returns the head reference of the reversed list.
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
h5.printList() # This should print: 50,40,30,20,10.  
    
print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
h6.printList() # This should print: 10,20,30,40.  
    
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40.  
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40.  
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75. 
    
    
    
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
h7.printList() # This should print: 10,20,30,40,50,60,70.  
    
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
    
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
h7.printList() # This should print: 20,30,40,50,60,70.  
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
h7.printList() # This should print: 20,30,40,60,70.  
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
h7.printList() # This should print: 20,30,40,60. 
    
    
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
h8.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the left by 1 position.
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10.  
    
    
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list
h9.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the right by 1 position.
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30.